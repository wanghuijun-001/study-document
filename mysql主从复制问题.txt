MySQL5.6开始主从复制有两种方式：基于日志（binlog）、基于GTID（全局事务标示符）。

Mysql的主从复制中主要有三个线程：master（binlog dump thread）、slave（I/O thread 、SQL thread），Master一条线程和Slave中的两条线程。

master（binlog dump thread）主要负责Master库中有数据更新的时候，会按照binlog格式，将更新的事件类型写入到主库的binlog文件中。

并且，Master会创建log dump线程通知Slave主库中存在数据更新，这就是为什么主库的binlog日志一定要开启的原因。

I/O thread线程在Slave中创建，该线程用于请求Master，Master会返回binlog的名称以及当前数据更新的位置、binlog文件位置的副本。

然后，将binlog保存在 「relay log（中继日志）」 中，中继日志也是记录数据更新的信息。

SQL线程也是在Slave中创建的，当Slave检测到中继日志有更新，就会将更新的内容同步到Slave数据库中，这样就保证了主从的数据的同步。

以上就是主从复制的过程，当然，主从复制的过程有不同的策略方式进行数据的同步，主要包含以下几种：

「同步策略」：Master会等待所有的Slave都回应后才会提交，这个主从的同步的性能会严重的影响。
「半同步策略」：Master至少会等待一个Slave回应后提交。
「异步策略」：Master不用等待Slave回应就可以提交。
「延迟策略」：Slave要落后于Master指定的时间。
对于不同的业务需求，有不同的策略方案，但是一般都会采用最终一致性，不会要求强一致性，毕竟强一致性会严重影响性能。


MySQL主从复制（也称A/B复制）的原理

1、基于语句的复制：主服务器上面执行的语句在从服务器上面再执行一遍，在MySQL-3.23版本以后支持。

存在的问题：时间上可能不完全同步造成偏差，执行语句的用户也可能是不同一个用户。

2、基于行的复制：把主服务器上面改编后的内容直接复制过去，而不关心到底改变该内容是由哪条语句引发的，在MySQL-5.0版本以后引入。

存在的问题：比如一个工资表中有一万个用户，我们把每个用户的工资+1000，那么基于行的复制则要复制一万行的内容，由此造成的开销比较大，而基于语句的复制仅仅一条语句就可以了。

3、混合类型的复制：MySQL默认使用基于语句的复制，当基于语句的复制会引发问题的时候就会使用基于行的复制，MySQL会自动进行选择。

注意事项：
(1)主从服务器操作系统版本和位数一致；

(2) Master和Slave数据库的版本要一致；

(3) Master和Slave数据库中的数据要一致；

(4) Master开启二进制日志，Master和Slave的server_id在局域网内必须唯一；


对于不改变数据库的语句则不进行记录。这种情况叫做基于语句的复制，前面提到过还有一种情况是基于行的复制，两种模式各有各的优缺点

在mysql配置文件中加上以下代码
[mysqld]
server-id= 130  #设置server_id，一般设置为IP
log-bin= /var/log/mysql/mysql-bin.log  #开启二进制日志功能，可以随便取，最好有含义
binlog-do-db=project #复制过滤：需要备份的数据库，输出binlog
binlog-ignore-db=mysql #复制过滤：不需要备份的数据库，不输出（mysql库一般不同步）
binlog_cache_size=1M  #为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存
binlog_format=mixed #主从复制的格式（mixed,statement,row，默认格式是statement）
expire_logs_days=7 #二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。
slave_skip_errors=1062 #跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致

报错mysql-bin.index找不到，则需要执行chown mysql:mysql -R log-bin日志文件所在目录

执行chown mysql:mysql -R log-bin所在目录报错则执行
groupadd mysql
useradd -g mysql mysql
然后再执行chown mysql:mysql -R log-bin日志文件所在目录

mysql挂载的目录：
docker inspect mysql | grep Binds -A 4


bin_log日志文件总结：
1.binlog文件会随服务的启动创建一个新文件

2.通过flush logs 可以手动刷新日志，生成一个新的binlog文件

3.通过show master status 可以查看binlog的状态

4.通过reset master 可以清空binlog日志文件

5.通过mysqlbinlog 工具可以查看binlog日志的内容

6.通过执行dml，mysql会自动记录binlog


从节点执行连接主节点：
change master to
master_host='39.105.191.22',
master_user='root',
master_password='123456',
master_log_file='mysql-bin.000001',
master_log_pos=120;

再执行：start slave;

显示从节点状态：
show slave status;

ShardingSphere 目前只支持单主库。
spring:
 shardingsphere:
    datasource:
      names: master,slave1,slave2
      master:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://47.108.50.216:3306/project?serverTimezone=GMT%2B8&useSSL=true
        username: root
        password: 123456
      slave1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://47.108.50.216:3307/project?serverTimezone=GMT%2B8&useSSL=true
        username: root
        password: 123456
      slave2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://47.108.50.216:3308/project?serverTimezone=GMT%2B8&useSSL=true
        username: root
        password: 123456
    masterslave:
      load-balance-algorithm-type: round_robin              # 负载均衡算法，
      name: ms
      master-data-source-name: master                        # 主库数据源名字
      slave-data-source-names: slave1,slave2                   # 从库数据源名字
    props:
      sql:
        show: true





